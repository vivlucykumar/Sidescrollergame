import { useState, useCallback, useLayoutEffect } from 'react';
const breakpoints = {
    xs: 639,
    sm: 767,
    md: 1023,
    lg: 1279,
    xl: 1535,
    '2xl': Infinity,
};
const getBreakpoint = (width) => {
    return Object.keys(breakpoints)
        .find(bp => width <= breakpoints[bp]) ?? '2xl';
};
export const useScreenSize = () => {
    const [screenSize, setScreenSize] = useState(() => typeof window === 'undefined' ? 'xl' : getBreakpoint(window.innerWidth));
    const handleResize = useCallback(() => {
        setScreenSize(getBreakpoint(window.innerWidth));
    }, []);
    useLayoutEffect(() => {
        if (typeof window === 'undefined')
            return;
        let ticking = false;
        const onResize = () => {
            if (ticking)
                return;
            ticking = true;
            requestAnimationFrame(() => {
                handleResize();
                ticking = false;
            });
        };
        // Initial measurement
        handleResize();
        window.addEventListener('resize', onResize);
        return () => window.removeEventListener('resize', onResize);
    }, [handleResize]);
    const eq = (bp) => screenSize === bp;
    const lt = (bp) => breakpoints[screenSize] < breakpoints[bp];
    const gt = (bp) => breakpoints[screenSize] > breakpoints[bp];
    const lte = (bp) => eq(bp) || lt(bp);
    const gte = (bp) => eq(bp) || gt(bp);
    return {
        eq,
        lt,
        gt,
        lte,
        gte,
        toString: () => screenSize,
    };
};
