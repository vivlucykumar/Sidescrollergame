import { useCallback, useRef, useState } from 'react';
import { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';
/**
 * Check browser permissions for querying state for various browser APIs
 *
 * @param {Permission} permission The name of the permission to query.
 * @return {UsePermissionState} The state of a requested permission
 */
export const usePermission = (permission) => {
    const [state, setState] = useState('checking');
    const status = useRef(null);
    const handleStatusChange = useCallback((event) => {
        const target = event.target;
        setState(target.state);
    }, []);
    const checkPermission = useCallback(async () => {
        if (typeof navigator === 'undefined' || !navigator.permissions) {
            setState('not-supported');
            return;
        }
        try {
            const result = await navigator.permissions.query({
                name: permission
            });
            setState(result.state);
            result.addEventListener('change', handleStatusChange);
            status.current = result;
        }
        catch {
            setState('not-supported');
            status.current = null;
        }
    }, [permission, handleStatusChange]);
    useIsomorphicLayoutEffect(() => {
        checkPermission();
        return () => {
            status.current?.removeEventListener('change', handleStatusChange);
        };
    }, [checkPermission, handleStatusChange]);
    return state;
};
